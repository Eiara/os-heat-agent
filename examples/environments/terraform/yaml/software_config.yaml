---
heat_template_version: 2018-08-31

description: |
  test

parameters:
  name:
    type: string
  image_id:
    type: string
    label: Instance ID (no, no lookup, sorry)
  network_id:
    type: string
  subnet_id:
    type: string
  flavor:
    type: string
    label: Instance flavor
    default: c1.c1r1
  key_name:
    type: string
    label: SSH key
  volume_size:
    type: number
    label: Size of the volume. Default 10GB.
    default: 10
  security_groups:
    type: comma_delimited_list
    label: List of security group IDs
  protocol_port:
    type: number
    default: 80
    label: "Host port used for connections. Default: 80"
  ip_address:
    type: string

resources:
  cloud_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
          - content: |
              #!/bin/bash
              
              export PIPX_BIN_DIR=/usr/local/bin
              export PIPX_HOME=/opt/pipx
              mkdir -p /opt/pipx
              export PIPX_MAN_DIR=/usr/local/share/man
              pipx install --include-deps git+https://github.com/Eiara/os-heat-agent.git@v1.0.0rc3
              pipx inject os_heat_agent boto3 click structlog atpublic requests
            path: /root/install_os_heat_agent.sh
            permissions: "0755"
          - content: |
              [Unit]
              Description=Openstack Heat Agent
              # Network-online means that things should work as expected. Should.
              Wants=network-online.target cloud-init.target
              After=network-online.target
              
              [Service]
              User=root
              
              Type=simple
              WorkingDirectory=/opt/os-heat-agent/
              # -r to have it auto-fetch the region
              ExecStart=/usr/local/bin/os_heat_agent -l debug -r
              # Restart stuff
              
              Restart=always
              # Wait 10 seconds to restart
              RestartSec=10
              
              [Install]
              WantedBy=multi-user.target
            path: /lib/systemd/system/os-heat-agent.service
          - content: |
              [agent]
              polling_interval = 60
              init_file = /var/lib/heat-cfntools/cfn-init-data
              [cache]
              dir = /var/lib/heat-cfntools
              filename = os-cfn-current
              [tools.shell.runners]
              bash = /bin/bash
            path: /etc/os_heat_agent.ini
          - content: |
              APT::Install-Recommends "0";
              APT::Install-Suggests "0"; 
            path: /etc/apt/apt.conf.d/01-install.conf
        package_update: true
        packages:
          - jq
          - python-is-python3
          # - python3-boto3
          # - python3-click
          # - python3-structlog
          - httpie
          - nginx
        runcmd:
          - [ mkdir, -p, /opt/os-heat-agent/ ]
          - [ apt-get, -y, --no-install-recommends, install, 'pipx', 'git']
          - [ /bin/bash, /root/install_os_heat_agent.sh ]
          - [ systemctl, daemon-reload ]
          - [ systemctl, start, os-heat-agent ]
          - [ systemctl, start, nginx ]
          - [ systemctl, enable, nginx ]
          # - [ systemctl, start, os-heat-agent ]
          # - [ systemctl, enable, os-heat-agent ]
  config:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: Web::Shell::Bash
      config: |
        #!/bin/bash
        code=0
        while [ $code -ne 200 ]; do
          sleep 10
          code=$(/usr/bin/curl -i -o /dev/null --silent -w "%{http_code}" $url)
        done
      options:
        # Required
        os_heat_agent_tool: /usr/bin/bash
        os_heat_agent_serialize: true
      inputs:
        - name: envar_url
          type: String
          description: "URL to ping for health check, to verify that the node is online."
          
      outputs:
        # Required
        - name: "os_heat_agent_is_error"
          description: "Did the job fail?"
          type: Boolean
          error_output: true
  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      server: { get_resource: server }
      actions: ["CREATE", "UPDATE"]
      config: { get_resource: config }
      input_values:
        envar_url: http://localhost:80/
      # signal_transport: CFN_SIGNAL
      # signal_transport: NO_SIGNAL
      signal_transport: TEMP_URL_SIGNAL
      # signal_transport: HEAT_SIGNAL
  server:
    type: OS::Nova::Server
    properties:
      name: {get_param: name}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - port: {get_resource: instance_port}
      image: {get_param: image_id}
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: cloud_init }
  instance_port:
      type: OS::Neutron::Port
      properties:
        network: {get_param: network_id}
        security_groups: {get_param: security_groups}
        fixed_ips:
          - subnet: {get_param: subnet_id}
  associate:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: ip_address }
      port_id: { get_resource: instance_port }